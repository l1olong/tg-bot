const mongoose = require('mongoose');
const Complaint = require('../models/complaint');
const messages = require('./messages');
const crypto = require('crypto');
const ADMIN_ID = process.env.ADMIN_ID;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –≤–µ–±-–¥–æ–¥–∞—Ç–∫–æ–º
function getMainKeyboard(lang) {
  const webAppUrl = process.env.WEBAPP_URL || 'https://tg-bot-aabw.onrender.com';
  return {
    reply_markup: {
      keyboard: [
        [{ 
          text: lang === 'ua' ? 'üåê –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª' : 'üåê Open Web Portal',
          web_app: { url: webAppUrl }
        }]
      ],
      resize_keyboard: true
    }
  };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö Telegram WebApp
/*function validateTelegramWebAppData(initData, botToken) {
  // –†–æ–∑–¥—ñ–ª—è—î–º–æ initData –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∞ —Ö–µ—à
  const params = new URLSearchParams(initData);
  const hash = params.get('hash');
  params.delete('hash');
  
  // –°–æ—Ä—Ç—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
  const paramsSorted = Array.from(params.entries())
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([key, value]) => `${key}=${value}`)
    .join('\n');
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ HMAC-SHA256 —Ö–µ—à –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º botToken
  const secretKey = crypto.createHash('sha256')
    .update(botToken)
    .digest();
  
  const calculatedHash = crypto.createHmac('sha256', secretKey)
    .update(paramsSorted)
    .digest('hex');
  
  // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –æ–±—á–∏—Å–ª–µ–Ω–∏–π —Ö–µ—à –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏–º
  return calculatedHash === hash;
}*/

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
function isAdmin(userId) {
  return userId && (userId.toString() === ADMIN_ID || userId === ADMIN_ID);
}

module.exports = {
  getMainKeyboard,
  /*validateTelegramWebAppData,
  isAdmin*/
};